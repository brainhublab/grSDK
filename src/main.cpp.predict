#include "GRT/GRT.h"
#include "grAlgorithm.h"
#include "grGrt.h"
#include "grTrajectory.h"
using namespace GRT;
using namespace std;

int main (int argc, const char * argv[])
{
    GRGrt  grt;

    // grAlg.loadTrainingData("../trainingData/grTrainingDTWtest.grt");
    //grAlg.setTestDataFromTraining(20);

    grt.loadModel("../trainingData/DTWModel.grt");

    //grAlg.train();
    //grAlg.test();

    //grAlg.saveModel("../trainingData/DTWModel.grt");

    GRConnection conn;
    device_t* device;
    gr_message msg;
    gr_alg_message alg_msg;
    //device.address = "98:D3:32:10:AC:59";
    std::map<int, device_t> devices;
    devices = conn.getAvalibleDevices();
    int devId;
    for(std::map<int, device_t>::iterator it=devices.begin(); it!=devices.end(); it++)
    {
        if(it->second.name == "GR[R]")
        {
            devId = it->first;
        }
    }

    std::cout<<devId<<"DEV ID"<<std::endl;
    conn.setActiveDevice(devId);
    conn.connectSocket(devId);
    GRAlgorithm alg;
    alg.setupMadgwick(140, 140, 140, 140, 140, 220); //need to check


    std::unordered_map<std::string, gr_message> data;
    FILE* f, *fa;
    f = fopen("firs.txt", "w");
    fa = fopen("firs_acc.txt", "w");
    std::vector<double> acc_norm, acc;
    double time;
    GRTrajectory traj;
    int itr = 0;


    GRT::MatrixDouble realData;
    GRT::Vector<GRT::VectorDouble> realDataVector;
    GRT::VectorDouble sample;
    sample.resize(7);
    while(conn.getData(devId, &msg))
    {

        if(!msg.imus["palm"]->acc.empty() && itr > 10)
        {

            alg.madgwickUpdate(&msg, &alg_msg, 1, "flag");
            //                    std::cout<<alg_msg.palm[0];
            // trajectory = traj.getNewPosByRunge(msg.palm.acc, alg_msg.palm, msg.palm.time_stamp);
            acc_norm = traj.getAccelerations(msg.palm.acc, alg_msg.palm);

            for(int i = 0; i < 7; i++)
            {
                if( i < 3 )
                {
                    sample[i] = acc_norm[i];
                }
                else
                {
                    sample[i] = alg_msg.palm[i - 3];
                }
            }
            if(realDataVector.size()>= 64)
            {
                realDataVector.erase(realDataVector.begin());
                realDataVector.push_back(sample);
                sample.clear();
                sample.resize(7);
                grt.predict(GRT::MatrixDouble(realDataVector));
                std::cout << grt.getPredictedClassLabel() << " - " << grt.getMaximumLikelihood() << std::endl;
            }
            else
            {
                realDataVector.push_back(sample);
            }
        }

        msg.palm.gyro.clear();
        msg.palm.acc.clear();
        msg.palm.mag.clear();
        acc_norm.clear();

        alg_msg.clear();
        itr ++;
    }
    return 0;
}
