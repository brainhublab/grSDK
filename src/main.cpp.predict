#include "GRT/GRT.h"
#include "grAlgorithm.h"
#include "grGrt.h"
#include "grTrajectory.h"
using namespace GRT;
using namespace std;

int main (int argc, const char * argv[])
{
    GRGrt  grt;

    // grAlg.loadTrainingData("../trainingData/grTrainingDTWtest.grt");
    //grAlg.setTestDataFromTraining(20);

    grt.loadModel("../trainingData/DTWModel.grt");

    //grAlg.train();
    //grAlg.test();

    //grAlg.saveModel("../trainingData/DTWModel.grt");

    GRConnection conn;
    device_t* device;
    gr_message msg;
    gr_alg_message alg_msg;
    //device.address = "98:D3:32:10:AC:59";
    std::map<int, device_t> devices;
    devices = conn.getAvalibleDevices();
    int devId;
    for(std::map<int, device_t>::iterator it=devices.begin(); it!=devices.end(); it++)
    {
        if(it->second.name == "GR[R]")
        {
            devId = it->first;
        }
    }

    std::cout<<devId<<"DEV ID"<<std::endl;
    conn.setActiveDevice(devId);
    conn.connectSocket(devId);
    GRAlgorithm alg;
    alg.setupMadgwick(140, 140, 140, 140, 140, 220); //need to check


    std::unordered_map<std::string, gr_message> data;
    FILE* f, *fa;
    f = fopen("firs.txt", "w");
    fa = fopen("firs_acc.txt", "w");
    std::vector<double> trajectory, acc;
    double time;
    GRTrajectory traj;
    int itr = 0;


    GRT::MatrixDouble realData;
    GRT::Vector<GRT::VectorDouble> realDataVector;
    GRT::VectorDouble sample;
    sample.resize(7);
    while(conn.getData(devId, &msg))
    {

        if(!msg.imus["palm"]->acc.empty() && itr > 10)
        {

            alg.madgwickUpdate(&msg, &alg_msg, 1, "flag");
            //                    std::cout<<alg_msg.palm[0];
            trajectory = traj.getNewPosByRunge(msg.palm.acc, alg_msg.palm, msg.palm.time_stamp);

            //      printf( "%s %f %f %f \n","trjectory", trajectory[0], trajectory[1], trajectory[2]);
            fprintf(f, "%f %f %f %f %f %f %f \n", trajectory[0], trajectory[1], trajectory[2],
                    alg_msg.palm[0], alg_msg.palm[1], alg_msg.palm[2], alg_msg.palm[3]);
            fprintf(fa, "%f %f %f \n", msg.palm.acc[0], msg.palm.acc[1], msg.palm.acc[2]);

            for(int i = 0; i < 7; i++)
            {
                if( i < 3 )
                {
                    sample[i] = trajectory[i];
                }
                else
                {
                    sample[i] = alg_msg.palm[i - 3];
                }
            }
            if(realDataVector.size()>= 124)
            {

                realDataVector.erase(realDataVector.begin());
                realDataVector.push_back(sample);
                sample.clear();
                sample.resize(7);
                grt.predict(GRT::MatrixDouble(realDataVector));
                std::cout<<grt.getPredictedClassLabel()<<std::endl;


            }
            else
            {

                realDataVector.push_back(sample);
            }


            std::cout<<"device is "<<traj.isStationary()<<std::endl;
        }
        msg.palm.gyro.clear();
        msg.palm.acc.clear();
        msg.palm.mag.clear();
        trajectory.clear();

        alg_msg.clear();
        itr ++;
    }
    return 0;
}
