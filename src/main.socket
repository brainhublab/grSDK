#include "GRT/GRT.h"
#include "grAlgorithm.h"
#include "grDevManager.h"
#include "grConnection.h"
#include "grDevice.h"
#include "grTrajectory.h"
#include "grSocket.h"

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <unistd.h>
#include <string>
#include <sys/socket.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/rfcomm.h>
#include <map>
#include <unordered_map>
#include <ncurses.h>
//using namespace GRT;
//using namespace std;


int main (int argc, const char * argv[])
{

    //Gnuplot gp;
    /*
       GRAlgorithm grAlg;

       grAlg.loadTrainingData("./data/grTrainingDTWtest.grt");
       grAlg.setTestDataFromTraining(20);

    //grAlg.loadModel("./data/DTWModel.grt");

    grAlg.train();
    grAlg.test();

    grAlg.saveModel("./data/DTWModel.grt");
    cout << grAlg.getTestAccuracy() << endl;
    */
    GRDevManager devManager;
    GRConnection* devConn;
    GRDevice* device;
    GRMessage msg;
    GRAlgMessage alg_msg;

    // Set up socket for UI communication
    GRSocket socketCtrl = GRSocket();

	if (!socketCtrl.setUp())
    {
        exit(1);
    }
    if (!socketCtrl.startListening())
    {
        exit(1);
    }
    // end of socket set up

    std::vector<GRDevice> devices;
    devices = devManager.getAvalibleDevices();
    int devId=-1;
    int i = 0;
    for(std::vector<GRDevice>::iterator it=devices.begin(); it!=devices.end(); i++, it++)
    {
        if(it->name == "GR[R]")
        {
            devId = i;
        }
    }

    if(devId == -1)
    {
        std::cout << "Device not found" << std::endl;
        return 0;
    }

    std::cout<<"devId: "<<devId<<std::endl;
    devConn = devManager.setActiveDevice(devId);
    devConn->connectSocket();

    GRAlgorithm alg;
    alg.setupMadgwick(140, 140, 140, 140, 140, 220); //need to check

    std::unordered_map<std::string, GRMessage> data;

    while(devConn->getData(&msg))
    {
        if (!msg.empty())
        {
            // printf("working\n");

            if (alg.madgwickUpdate(&msg, &alg_msg) && !alg_msg.empty())
            {
                socketCtrl.addRotationsData(alg.getEulerRotations(alg_msg));
            }

            for (auto const& x: msg.imus)
            {
                socketCtrl.addRawData(x.first, x.second);
            }
        }
        else
        {
            printf("no data\n");
        }

        socketCtrl.pollConnections();
    }

    return 0;
}
